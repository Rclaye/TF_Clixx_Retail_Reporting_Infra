pipeline {
    agent any

    environment {
        PATH = "${PATH}:${getTerraformPath()}"
        TERRAFORM_DIR = "Full-deployment"
        // Define RUNNER variable to prevent null pointer exceptions
        RUNNER = "${currentBuild.getBuildCauses()[0].userId ?: 'System'}"
    }
    
    stages {
        stage('Approval to Launch Pipeline') {
            steps {
                script {
                    input(
                        id: 'start_confirm',
                        message: 'Ready to Launch the Pipeline?',
                        parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Start the Pipeline?', name: 'confirm']
                        ]
                    )
                }
            }
        }

        stage('Terraform Init') {
            steps {
                slackSend(
                    channel: '#stackjenkins',
                    color: 'FFFF00_1',
                    message: "Terraform init started by ${env.RUNNER} on job ${env.JOB_NAME} [${env.BUILD_NUMBER}].",
                    tokenCredentialId: 'Stack_API_Token'
                )
                sh """
                    cd ${TERRAFORM_DIR}
                    terraform init
                """
            }
        }

        stage('Terraform Plan') {
            steps {
                withCredentials([file(credentialsId: 'clixx-tfvars', variable: 'TFVARS_FILE')]) {
                    slackSend(
                        channel: '#stackjenkins',
                        color: 'FFFF00_1',
                        message: "Terraform plan started by ${env.RUNNER} on job ${env.JOB_NAME} [${env.BUILD_NUMBER}].",
                        tokenCredentialId: 'Stack_API_Token'
                    )
                    sh """
                        cd ${TERRAFORM_DIR}
                        terraform plan -var-file="\$TFVARS_FILE" -out=tfplan -input=false
                    """
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withCredentials([file(credentialsId: 'clixx-tfvars', variable: 'TFVARS_FILE')]) { 
                    slackSend(
                        channel: '#stackjenkins',
                        color: '36A64F_1',
                        message: "Terraform apply started by ${env.RUNNER} on job ${env.JOB_NAME} [${env.BUILD_NUMBER}].",
                        tokenCredentialId: 'Stack_API_Token'
                    )
                    sh """
                        cd ${TERRAFORM_DIR}
                        terraform apply -var-file="\$TFVARS_FILE" -input=false tfplan
                    """
                }
            }
        }

        stage('Approval to Destroy Infrastructure') {
            steps {
                script {
                    input(
                        id: 'destroy_confirm',
                        message: 'Do you want to destroy this environment?',
                        parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Run terraform destroy?', name: 'confirm']
                        ]
                    )
                }
            }
        }

        stage('Terraform Destroy') {
            steps {
                withCredentials([file(credentialsId: 'clixx-tfvars', variable: 'TFVARS_FILE')]) {
                    slackSend(
                        channel: '#stackjenkins',
                        color: 'FF0000_1',
                        message: "Terraform destroy started on job ${env.JOB_NAME} [${env.BUILD_NUMBER}].",
                        tokenCredentialId: 'Stack_API_Token'
                    )
                    sh """
                        cd ${TERRAFORM_DIR}
                        terraform destroy -var-file="\$TFVARS_FILE" -auto-approve
                    """
                }
            }
        }
    }

    post {
        success {
            slackSend(
                channel: '#stackjenkins',
                color: 'good',
                message: "Terraform deployment completed successfully. Job: ${env.JOB_NAME}, Build: #${env.BUILD_NUMBER}.",
                tokenCredentialId: 'Stack_API_Token'
            )
            echo "Deployment successful."
        }
        failure {
            slackSend(
                channel: '#stackjenkins',
                color: 'danger',
                message: "Terraform deployment failed. Job: ${env.JOB_NAME}, Build: #${env.BUILD_NUMBER}. Check logs for details.",
                tokenCredentialId: 'Stack_API_Token'
            )
            echo "Deployment failed. Check logs."
        }
        always {
            script {
                if (currentBuild.currentResult == 'SUCCESS' && env.STAGE_NAME == 'Terraform Destroy') {
                    slackSend(
                        channel: '#stackjenkins',
                        color: 'good',
                        message: "Terraform destroy completed successfully. Job: ${env.JOB_NAME}, Build: #${env.BUILD_NUMBER}.",
                        tokenCredentialId: 'Stack_API_Token'
                    )
                } else if (currentBuild.currentResult == 'FAILURE' && env.STAGE_NAME == 'Terraform Destroy') {
                    slackSend(
                        channel: '#stackjenkins',
                        color: 'danger',
                        message: "Terraform destroy failed. Job: ${env.JOB_NAME}, Build: #${env.BUILD_NUMBER}.",
                        tokenCredentialId: 'Stack_API_Token'
                    )
                }
            }
        }
    }
}

def getTerraformPath() {
    // Try to use the named terraform tool, or fall back to the system path
    try {
        return tool(name: 'terraform-14', type: 'terraform')  // Changed back to match your configured tool name
    } catch (Exception e) {
        return "/usr/local/bin"
    }
}
